!pip install -q diffusers gradio transformers accelerate safetensors deep-translator langdetect

import torch
from diffusers import DiffusionPipeline
import gradio as gr
from deep_translator import GoogleTranslator
from langdetect import detect
import base64
from io import BytesIO
from PIL import Image

# === –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ===
device = "cuda" if torch.cuda.is_available() else "cpu"
dtype = torch.float16 if device == "cuda" else torch.float32

# === –ó–∞–≥—Ä—É–∑–∫–∞ SDXL ===
pipe = DiffusionPipeline.from_pretrained(
    "stabilityai/stable-diffusion-xl-base-1.0",
    torch_dtype=dtype,
    use_safetensors=True,
    variant="fp16" if dtype == torch.float16 else None
)
pipe.to(device)

# === –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω ===
ASPECT_RATIOS = {
    "1:1 (1024x1024)": (1024, 1024),
    "4:3 (1024x768)": (1024, 768),
    "16:9 (1152x648)": (1152, 648)
}

# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ (–µ—Å–ª–∏ –Ω–µ EN) ===
def translate_if_needed(text):
    try:
        lang = detect(text)
        if lang != "en":
            return GoogleTranslator(source='auto', target='en').translate(text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:", e)
    return text

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
def generate(prompt, style, count, aspect_ratio, history_state, progress=gr.Progress(track_tqdm=True)):
    count = int(count)
    translated_prompt = translate_if_needed(prompt)

    if style == "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        style = ""
    full_prompt = f"{translated_prompt}, {style}" if style else translated_prompt
    width, height = ASPECT_RATIOS.get(aspect_ratio, (1024, 1024))

    result = []
    for i in range(count):
        progress(i, desc=f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {i+1}/{count}...")
        image = pipe(prompt=full_prompt, width=width, height=height).images[0]
        buffered = BytesIO()
        image.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        result.append((image, img_str))

    history_state.append((prompt, result))
    return [r[0] for r in result], history_state

# === HTML –∏—Å—Ç–æ—Ä–∏—è (—Å base64 —Å—Å—ã–ª–∫–∞–º–∏ + –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ) ===
def history_to_html(history_items):
    html = ""
    for prompt_text, images in reversed(history_items[-5:]):
        html += f"<div style='margin-top:20px'><b style='color: #7c3aed;'>–ü—Ä–æ–º–ø—Ç:</b> {prompt_text}<br><div style='display:flex;gap:10px;flex-wrap: wrap;'>"

        for _, b64 in images:
            img_data_url = f"data:image/png;base64,{b64}"
            html += f"""
            <a href="{img_data_url}" target="_blank">
                <img src="{img_data_url}" width="128" style="border-radius:8px;cursor:pointer;">
            </a>
            """
        html += "</div></div>"
    return html

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
with gr.Blocks(
    theme=gr.themes.Soft(),
    css="""
    #gallery {
        height: 600px !important;
    }
    #gallery .gallery {
        grid-template-columns: repeat(auto-fill, minmax(256px, 1fr));
        gap: 12px;
        height: 100% !important;
        align-content: start;
    }
    #gallery img {
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0,0,0,0.2);
    }
"""
) as demo:

    gr.Markdown("## üé® MJalt —Ç–µ–ø–µ—Ä—å –æ–Ω–ª–∞–π–Ω", elem_id="title")
    gr.Markdown("*–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é*", elem_id="subtitle")

    history = gr.State(value=[])

    with gr.Row():
        with gr.Column(scale=2):
            prompt = gr.Textbox(label="–û–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç)", placeholder="Futuristic city on sunset", lines=2)
            style = gr.Dropdown(
                choices=["–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º", "–∞–Ω–∏–º–µ", "–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "–º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å"],
                value="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                label="–°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            )
            aspect_ratio = gr.Dropdown(
                choices=list(ASPECT_RATIOS.keys()),
                value="1:1 (1024x1024)",
                label="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω"
            )
            count = gr.Dropdown(choices=["1", "2", "3", "4", "5"], value="1", label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            btn = gr.Button("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")

        with gr.Column(scale=3):
            output = gr.Gallery(label="–†–µ–∑—É–ª—å—Ç–∞—Ç", elem_id="gallery")
            history_html = gr.HTML(label="–ò—Å—Ç–æ—Ä–∏—è")

    btn.click(
        fn=generate,
        inputs=[prompt, style, count, aspect_ratio, history],
        outputs=[output, history]
    ).then(
        fn=history_to_html,
        inputs=history,
        outputs=history_html
    )

demo.launch(share=True, show_api=False)
